/*! Image Uploader - v1.0.0 - 15/07/2019
 * Copyright (c) 2019 Christian Bayer; Licensed MIT */

(function ($) {

    $.fn.imageUploader = function (options) {

        // Default settings
        let defaults = {
            preloaded: [],
            imagesInputName: 'images',
            preloadedInputName: 'preloaded',
            label: 'Drag & Drop files here or click to browse'
        };

        // Get instance
        let plugin = this;

        // Set empty settings
        plugin.settings = {};

        // Plugin constructor
        plugin.init = function () {

            // Define settings
            plugin.settings = $.extend(plugin.settings, defaults, options);

            // Run through the elements
            plugin.each(function (i, wrapper) {

                // Create the container
                let $container = createContainer();

                // Append the container to the wrapper
                $(wrapper).append($container);

                // Set some bindings
                $container.on("dragover", fileDragHover.bind($container));
                $container.on("dragleave", fileDragHover.bind($container));
                $container.on("drop", fileSelectHandler.bind($container));

                // If there are preloaded images
                if (plugin.settings.preloaded.length) {

                    // Change style
                    $container.addClass('has-files');

                    // Get the upload images container
                    let $uploadedContainer = $container.find('.uploaded');

                    // Set preloaded images preview
                    for (let i = 0; i < plugin.settings.preloaded.length; i++) {
                        $uploadedContainer.append(createImg(plugin.settings.preloaded[i].src, plugin.settings.preloaded[i].id, true));
                    }

                }

            });

        };


        let dataTransfer = new DataTransfer();

        let createContainer = function () {

            // Create the image uploader container
            let $container = $('<div>', { class: 'image-uploader' }),

                // Create the input type file and append it to the container
                $input = $('<input>', {
                    type: 'file',
                    id: plugin.settings.imagesInputName + '-' + random(),
                    name: plugin.settings.imagesInputName + '',
                    multiple: ''
                }).appendTo($container),

                // Create the uploaded images container and append it to the container
                $uploadedContainer = $('<div>', { class: 'uploaded' }).appendTo($container),

                // Create the text container and append it to the container
                $textContainer = $('<div>', {
                    class: 'upload-text'
                }).appendTo($container),

                // Create the icon and append it to the text container
                $i = $('<i>', { class: 'fa fa-cloud-upload', text: '' }).appendTo($textContainer),

                // Create the text and append it to the text container
                $span = $('<span>', { text: plugin.settings.label }).appendTo($textContainer);


            // Listen to container click and trigger input file click
            $container.on('click', function (e) {
                // Prevent browser default event and stop propagation
                prevent(e);

                // Trigger input click
                $input.trigger('click');
            });

            // Stop propagation on input click
            $input.on("click", function (e) {
                e.stopPropagation();
            });

            // Listen to input files changed
            $input.on('change', fileSelectHandler.bind($container));

            return $container;
        };


        let prevent = function (e) {
            // Prevent browser default event and stop propagation
            e.preventDefault();
            e.stopPropagation();
        };

        let createImg = function (src, id, alt) {

            console.log(src, alt);
            // Create the upladed image container
            let $container = $('<div>', { class: 'uploaded-image' }),

                // Create the img tag
                $img = $('<img>', { src: src, alt: alt }).appendTo($container),

                // Create the delete button
                $button = $('<button>', { class: 'delete-image' }).appendTo($container),

                // Create the delete icon
                $i = $('<i>', { class: 'fa fa-times', text: '' }).appendTo($button);

            // If the images are preloaded
            if (plugin.settings.preloaded.length) {

                // Set a identifier
                $container.attr('data-preloaded', true);

                // Create the preloaded input and append it to the container
                let $preloaded = $('<input>', {
                    type: 'hidden',
                    name: plugin.settings.preloadedInputName + '[]',
                    value: id
                }).appendTo($container)

            } else {

                // Set the identifier
                $container.attr('data-index', id);

            }

            // Stop propagation on click
            $container.on("click", function (e) {
                // Prevent browser default event and stop propagation
                prevent(e);
            });

            // Set delete action
            $button.on("click", function (e) {
                // Prevent browser default event and stop propagation
                prevent(e);

                // If is not a preloaded image
                if ($container.data('index')) {

                    // Get the image index
                    let index = parseInt($container.data('index'));

                    // Update other indexes
                    $container.find('.uploaded-image[data-index]').each(function (i, cont) {
                        if (i > index) {
                            $(cont).attr('data-index', i - 1);
                        }
                    });

                    // Remove the file from input
                    dataTransfer.items.remove(index);
                }

                // Remove this image from the container
                $container.remove();

                // If there is no more uploaded files
                if (!$container.find('.uploaded-image').length) {

                    // Remove the 'has-files' class
                    $container.removeClass('has-files');

                }

            });

            return $container;
        };

        let fileDragHover = function (e) {

            // Prevent browser default event and stop propagation
            prevent(e);

            // Change the container style
            if (e.type === "dragover") {
                $(this).addClass('drag-over');
            } else {
                $(this).removeClass('drag-over');
            }
        };

        let fileSelectHandler = function (e) {

            // Prevent browser default event and stop propagation
            prevent(e);

            // Get the jQuery element instance
            let $container = $(this);

            // Change the container style
            $container.removeClass('drag-over');

            // Get the files
            let files = e.target.files || e.originalEvent.dataTransfer.files;

            // Makes the upload
            setPreview($container, files);
        };

        let setPreview = function ($container, files) {

            // Add the 'has-files' class
            $container.addClass('has-files');

            // Get the upload images container
            let $uploadedContainer = $container.find('.uploaded'),

                // Get the files input
                $input = $container.find('input[type="file"]');

            // Run through the files
            $(files).each(function (i, file) {

                // Add it to data transfer
                dataTransfer.items.add(file);

                // Set preview
                $uploadedContainer.append(createImg(URL.createObjectURL(file), dataTransfer.items.length - 1, file.name));

            });

            // Update input files
            $input.prop('files', dataTransfer.files);

        };

        // Generate a random id
        let random = function () {
            return Date.now() + Math.floor((Math.random() * 100) + 1);
        };

        this.init();

        // Return the instance
        return this;
    };

}(jQuery));



// Input and label handler
$('input').on('focus', function () {
    $(this).parent().find('label').addClass('active')
}).on('blur', function () {
    if ($(this).val() == '') {
        $(this).parent().find('label').removeClass('active');
    }
});
$('form#form-post-images').on('reset', function (event) {
    $("input[name=path]").val('shared');
    //$("form#form-post-images .delete-image").trigger("click");
    $("input[name=photos]").val('');
    $(".uploaded .uploaded-image").remove();
    $(".image-uploader").removeClass("has-files");
});

$('form#form-post-images').on('submit', function (event) {

    // Stop propagation
    event.preventDefault();
    event.stopPropagation();

    // Get some vars
    let $form = $(this);
        
    // Checking whether FormData is available in browser  
    if (window.FormData !== undefined) {

        let alert = new AlertClass();
      
        var fileUpload = $("input[name=photos]").get(0);
        var files = fileUpload.files;
        var imagesUpload = files.length;
       if (imagesUpload > 0) {

            // Create FormData object  
            var fileData = new FormData();
            var fileList = [];
            imagesUpload = 0;
            // Looping over all files and add it to FormData object  
            for (var i = 0; i < files.length; i++) {
                if ($(".uploaded-image img[alt='" + files[i].name + "']").length == 1 && fileList.indexOf(files[i].name) == -1) {
                    fileData.append(files[i].name, files[i]);
                    fileList.push(files[i].name);
                    imagesUpload++;
                }

            }
           if (imagesUpload > 15) {
               alert.show({
                   title: 'Notify',
                   content: 'Please upload one time limited 15 files...',
                   btnText: 'I Understand'

               });
           }
            
           else if (imagesUpload > 0) {
                let path = $form.find('input[id^="name"]').val();
                let alt = $form.find('input[id^="alt"]').val();
                let caption = $form.find('input[id^="caption"]').val();

                let visibility = $form.find('input[name^="visibility"]:checked').val();
                let confirm = new ConfirmClass();
                
                confirm.show({
                    title: 'Do you want?',
                    content: 'Upload [' + imagesUpload + '] files to directory: [' + path + '].',
                    btns: [{
                        text: 'Upload',
                        callback: function (instance) {
                           
                            // Adding one more key to FormData object  
                            fileData.append('path', path);
                            fileData.append('alt', alt);
                            fileData.append('caption', caption);
                            fileData.append('visibility', visibility);

                            // Display the values
                            let toast = new ToastClass();
                            
                            $.ajax({
                                url: '/System/Assets',
                                type: "POST",
                                contentType: false, // Not to set any content header  
                                processData: false, // Not to process data  
                                data: fileData,
                                success: function (result) {
                                    $("form#form-post-images button[type=submit]").addClass("btn-contract");
                                    $("form#form-post-images button[type=reset]").trigger("click");
                                    setTimeout(function () {
                                        $("form#form-post-images button[type=submit]").removeClass("btn-contract");
                                    }, 2200);
                                    toast.show({
                                        text: result,
                                        duration: 2000
                                       
                                    })
                                },
                                error: function (err) {
                                    alert.show({
                                        title: 'Error',
                                        content: err.statusText,
                                        btnText: 'OK',
                                       
                                    });
                                   
                                },
                                complete: function () {

                                }
                            });
                        }
                    }, {
                        text: 'No, Thanks',
                        callback: function () {
                            console.log('Clicked No Button');
                        }
                    }],
                   
                })
                
            }
           
        }

        if (imagesUpload == 0) {
            alert.show({
                title: 'Notify',
                content: 'Please choose files...',
                btnText: 'I Understand',
                onShow: function () {
                    console.log('Alert!')
                },
                onHide: function () {
                    console.log('Hide!')
                }
            })
        }
        return true;

       
    } else {
        alert("FormData is not supported.");
    }  

});